name: 'Documentation and API Validation Action'
description: 'Lint markdown files using markdownlint-cli and validate OpenAPI specifications using Spectral'
author: 'OD-Oraf'

inputs:
  documentation-directory:
    description: 'Directory containing markdown files to lint'
    required: true
    default: './documentation'
  openapi-file:
    description: 'Path to OpenAPI specification file'
    required: true
    default: './openapi.yaml'

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install CLI tools
      shell: bash
      run: |
        npm install -g markdownlint-cli
        npm install -g @stoplight/spectral-cli
        echo "✅ Installed markdownlint-cli and spectral-cli"
      
    - name: Initialize validation state
      shell: bash
      run: |
        echo "VALIDATION_FAILED=false" >> $GITHUB_ENV
        echo "MARKDOWN_ERRORS=0" >> $GITHUB_ENV
        echo "OPENAPI_ERRORS=0" >> $GITHUB_ENV
        echo "# Validation Error Log" > validation-errors.md
        echo "" >> validation-errors.md
        
    - name: Validate inputs
      shell: bash
      run: |
        echo "🔍 Validating inputs..."
        echo "Documentation directory: ${{ inputs.documentation-directory }}"
        echo "OpenAPI file: ${{ inputs.openapi-file }}"
        
        # Check documentation directory
        if [ ! -d "${{ inputs.documentation-directory }}" ]; then
          echo "⚠️  Documentation directory does not exist: ${{ inputs.documentation-directory }}"
          echo "VALIDATION_FAILED=true" >> $GITHUB_ENV
          echo "## ❌ Input Validation Errors" >> validation-errors.md
          echo "- Documentation directory does not exist: ${{ inputs.documentation-directory }}" >> validation-errors.md
          echo "" >> validation-errors.md
        else
          echo "✅ Documentation directory exists"
        fi
        
        # Check OpenAPI file
        if [ ! -f "${{ inputs.openapi-file }}" ]; then
          echo "⚠️  OpenAPI file does not exist: ${{ inputs.openapi-file }}"
          echo "VALIDATION_FAILED=true" >> $GITHUB_ENV
          echo "## ❌ Input Validation Errors" >> validation-errors.md
          echo "- OpenAPI file does not exist: ${{ inputs.openapi-file }}" >> validation-errors.md
          echo "" >> validation-errors.md
        else
          echo "✅ OpenAPI file exists"
        fi
        
    - name: Create markdownlint config
      shell: bash
      run: |
        cat > .markdownlint.json << 'EOF'
        {
          "default": true,
          "MD013": false,
          "MD033": false,
          "MD041": false
        }
        EOF
        echo "📝 Created markdownlint configuration"
        
    - name: Create Spectral config
      shell: bash
      run: |
        cat > .spectral.yml << 'EOF'
        extends: ["@stoplight/spectral/rulesets/oas"]
        rules:
          info-contact: error
          info-description: error
          info-license: warn
          operation-description: error
          operation-operationId-unique: error
          operation-operationId-valid-in-url: error
          operation-parameters: error
          operation-tag-defined: error
          path-keys-no-trailing-slash: error
          tag-description: warn
          oas3-api-servers: error
          oas3-examples-value-or-externalValue: error
          oas3-operation-security-defined: error
          oas3-parameter-description: warn
          oas3-schema-names-pascal-case: warn
          oas3-server-trailing-slash: error
        EOF
        echo "📝 Created Spectral configuration for OpenAPI validation"
        
    - name: Lint markdown files
      shell: bash
      run: |
        echo "🔍 Linting markdown files in ${{ inputs.documentation-directory }}"
        
        # Skip if directory doesn't exist
        if [ ! -d "${{ inputs.documentation-directory }}" ]; then
          echo "⚠️  Skipping markdown linting - directory does not exist"
          exit 0
        fi
        
        # Count markdown files
        md_count=$(find "${{ inputs.documentation-directory }}" -name "*.md" -type f | wc -l)
        echo "Found $md_count markdown file(s) to lint"
        
        if [ $md_count -eq 0 ]; then
          echo "⚠️  No markdown files found in ${{ inputs.documentation-directory }}"
          exit 0
        fi
        
        # Run markdownlint and capture output
        if ! markdownlint "${{ inputs.documentation-directory }}" --config .markdownlint.json > markdownlint-output.txt 2>&1; then
          error_count=$(wc -l < markdownlint-output.txt)
          echo "❌ Found $error_count markdown linting issues"
          echo "VALIDATION_FAILED=true" >> $GITHUB_ENV
          echo "MARKDOWN_ERRORS=$error_count" >> $GITHUB_ENV
          
          echo "## ❌ Markdown Linting Errors" >> validation-errors.md
          echo "" >> validation-errors.md
          echo '```' >> validation-errors.md
          cat markdownlint-output.txt >> validation-errors.md
          echo '```' >> validation-errors.md
          echo "" >> validation-errors.md
          
          # Display errors in console
          cat markdownlint-output.txt
        else
          echo "✅ All markdown files passed linting!"
        fi
        
    - name: Validate OpenAPI file format
      shell: bash
      run: |
        echo "🔍 Validating OpenAPI file format: ${{ inputs.openapi-file }}"
        
        # Skip if file doesn't exist
        if [ ! -f "${{ inputs.openapi-file }}" ]; then
          echo "⚠️  Skipping OpenAPI validation - file does not exist"
          exit 0
        fi
        
        # Check if file has .yaml or .yml extension
        if [[ "${{ inputs.openapi-file }}" =~ \.(yaml|yml)$ ]]; then
          echo "✅ OpenAPI file has valid YAML extension"
        elif [[ "${{ inputs.openapi-file }}" =~ \.json$ ]]; then
          echo "✅ OpenAPI file has valid JSON extension"
        else
          echo "⚠️  OpenAPI file extension is not .yaml, .yml, or .json"
        fi
        
        # Basic file validation
        if [ -s "${{ inputs.openapi-file }}" ]; then
          echo "✅ OpenAPI file is not empty"
        else
          echo "❌ OpenAPI file is empty"
          echo "VALIDATION_FAILED=true" >> $GITHUB_ENV
          echo "## ❌ OpenAPI File Validation Errors" >> validation-errors.md
          echo "- OpenAPI file is empty" >> validation-errors.md
          echo "" >> validation-errors.md
        fi
        
    - name: Lint OpenAPI specification with Spectral
      shell: bash
      run: |
        echo "🔍 Linting OpenAPI specification: ${{ inputs.openapi-file }}"
        
        # Skip if file doesn't exist
        if [ ! -f "${{ inputs.openapi-file }}" ]; then
          echo "⚠️  Skipping Spectral linting - file does not exist"
          exit 0
        fi
        
        # Run Spectral linting and capture output
        if ! spectral lint "${{ inputs.openapi-file }}" --config .spectral.yml --format stylish > spectral-output.txt 2>&1; then
          echo "❌ OpenAPI specification failed Spectral validation"
          echo "VALIDATION_FAILED=true" >> $GITHUB_ENV
          
          # Count errors (lines that contain actual issues, not headers)
          error_count=$(grep -E "^\s*[0-9]+:[0-9]+" spectral-output.txt | wc -l || echo "0")
          echo "OPENAPI_ERRORS=$error_count" >> $GITHUB_ENV
          
          echo "## ❌ OpenAPI Spectral Validation Errors" >> validation-errors.md
          echo "" >> validation-errors.md
          echo '```' >> validation-errors.md
          cat spectral-output.txt >> validation-errors.md
          echo '```' >> validation-errors.md
          echo "" >> validation-errors.md
          
          # Display errors in console
          cat spectral-output.txt
        else
          echo "✅ OpenAPI specification passed Spectral validation!"
        fi
        
    - name: Generate OpenAPI validation report
      shell: bash
      run: |
        echo "📊 Generating detailed OpenAPI validation report..."
        
        # Skip if file doesn't exist
        if [ ! -f "${{ inputs.openapi-file }}" ]; then
          echo "⚠️  Skipping report generation - OpenAPI file does not exist"
          echo "[]" > spectral-report.json
          echo "# OpenAPI Validation Report" > spectral-report.md
          echo "" >> spectral-report.md
          echo "**Status:** ⚠️ OpenAPI file not found" >> spectral-report.md
          exit 0
        fi
        
        # Generate JSON report for potential artifact upload
        spectral lint "${{ inputs.openapi-file }}" --config .spectral.yml --format json > spectral-report.json 2>/dev/null || echo "[]" > spectral-report.json
        
        # Generate human-readable report
        echo "## OpenAPI Validation Report" > spectral-report.md
        echo "" >> spectral-report.md
        echo "**File:** \`${{ inputs.openapi-file }}\`" >> spectral-report.md
        echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> spectral-report.md
        echo "" >> spectral-report.md
        
        # Check if there are any issues
        issue_count=$(jq length spectral-report.json 2>/dev/null || echo "0")
        
        if [ "$issue_count" -eq 0 ]; then
          echo "**Status:** ✅ No issues found" >> spectral-report.md
        else
          echo "**Status:** ⚠️  Found $issue_count issue(s)" >> spectral-report.md
          echo "" >> spectral-report.md
          echo "### Issues Found:" >> spectral-report.md
          echo "" >> spectral-report.md
          
          # Convert JSON report to markdown table
          jq -r '.[] | "| \(.severity) | \(.code) | \(.path | join(".")) | \(.message) |"' spectral-report.json > temp-issues.txt 2>/dev/null || touch temp-issues.txt
          
          if [ -s temp-issues.txt ]; then
            echo "| Severity | Rule | Path | Message |" >> spectral-report.md
            echo "|----------|------|------|---------|" >> spectral-report.md
            cat temp-issues.txt >> spectral-report.md
          fi
          
          rm -f temp-issues.txt
        fi
        
        echo "📄 Generated spectral-report.json and spectral-report.md"
        
    - name: Validate OpenAPI specification structure
      shell: bash
      run: |
        echo "🔍 Performing additional OpenAPI structure validation..."
        
        # Skip if file doesn't exist
        if [ ! -f "${{ inputs.openapi-file }}" ]; then
          echo "⚠️  Skipping structure validation - file does not exist"
          exit 0
        fi
        
        # Check if file is valid YAML/JSON
        if [[ "${{ inputs.openapi-file }}" =~ \.(yaml|yml)$ ]]; then
          if ! python3 -c "import yaml; yaml.safe_load(open('${{ inputs.openapi-file }}'))" 2>/dev/null; then
            echo "❌ OpenAPI file is not valid YAML"
            echo "VALIDATION_FAILED=true" >> $GITHUB_ENV
            echo "## ❌ OpenAPI Structure Validation Errors" >> validation-errors.md
            echo "- OpenAPI file is not valid YAML" >> validation-errors.md
            echo "" >> validation-errors.md
          else
            echo "✅ OpenAPI file is valid YAML"
          fi
        elif [[ "${{ inputs.openapi-file }}" =~ \.json$ ]]; then
          if ! python3 -c "import json; json.load(open('${{ inputs.openapi-file }}'))" 2>/dev/null; then
            echo "❌ OpenAPI file is not valid JSON"
            echo "VALIDATION_FAILED=true" >> $GITHUB_ENV
            echo "## ❌ OpenAPI Structure Validation Errors" >> validation-errors.md
            echo "- OpenAPI file is not valid JSON" >> validation-errors.md
            echo "" >> validation-errors.md
          else
            echo "✅ OpenAPI file is valid JSON"
          fi
        fi
        
    - name: Generate GitHub Step Summary
      shell: bash
      run: |
        echo "# 📋 Documentation and API Validation Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Validation completed at:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Overall status
        if [ "$VALIDATION_FAILED" = "true" ]; then
          echo "## ❌ Validation Status: FAILED" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ✅ Validation Status: PASSED" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Markdown validation results
        echo "### 📝 Markdown Validation" >> $GITHUB_STEP_SUMMARY
        md_count=$(find "${{ inputs.documentation-directory }}" -name "*.md" -type f 2>/dev/null | wc -l || echo "0")
        echo "- **Files processed:** $md_count" >> $GITHUB_STEP_SUMMARY
        
        if [ ! -d "${{ inputs.documentation-directory }}" ]; then
          echo "- **Status:** ⚠️ Documentation directory not found" >> $GITHUB_STEP_SUMMARY
        elif [ $md_count -eq 0 ]; then
          echo "- **Status:** ⚠️ No markdown files found" >> $GITHUB_STEP_SUMMARY
        elif [ "$MARKDOWN_ERRORS" -gt 0 ]; then
          echo "- **Status:** ❌ Found $MARKDOWN_ERRORS linting issues" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Status:** ✅ All markdown files passed linting" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # OpenAPI validation results
        echo "### 🔌 OpenAPI Validation" >> $GITHUB_STEP_SUMMARY
        echo "- **File:** \`${{ inputs.openapi-file }}\`" >> $GITHUB_STEP_SUMMARY
        
        if [ ! -f "${{ inputs.openapi-file }}" ]; then
          echo "- **Status:** ⚠️ OpenAPI file not found" >> $GITHUB_STEP_SUMMARY
        elif [ "$OPENAPI_ERRORS" -gt 0 ]; then
          echo "- **Status:** ❌ Found $OPENAPI_ERRORS validation issues" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Status:** ✅ OpenAPI specification passed validation" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Error summary table
        if [ "$VALIDATION_FAILED" = "true" ]; then
          echo "### 📊 Issue Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Validation Type | Issues Found |" >> $GITHUB_STEP_SUMMARY
          echo "|----------------|--------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Markdown Linting | $MARKDOWN_ERRORS |" >> $GITHUB_STEP_SUMMARY
          echo "| OpenAPI Validation | $OPENAPI_ERRORS |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Include error details if validation-errors.md exists and has content
          if [ -f validation-errors.md ] && [ -s validation-errors.md ]; then
            echo "### 🚨 Error Details" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            cat validation-errors.md >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        # Generated artifacts
        echo "### 📄 Generated Reports" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The following validation reports have been generated:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- \`.markdownlint.json\` - Markdownlint configuration" >> $GITHUB_STEP_SUMMARY
        echo "- \`.spectral.yml\` - Spectral validation rules" >> $GITHUB_STEP_SUMMARY
        echo "- \`spectral-report.json\` - Machine-readable validation results" >> $GITHUB_STEP_SUMMARY
        echo "- \`spectral-report.md\` - Human-readable validation report" >> $GITHUB_STEP_SUMMARY
        if [ -f validation-errors.md ]; then
          echo "- \`validation-errors.md\` - Detailed error log" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Next steps
        if [ "$VALIDATION_FAILED" = "true" ]; then
          echo "### 🔧 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the error details above" >> $GITHUB_STEP_SUMMARY
          echo "2. Fix the identified issues in your documentation and OpenAPI specification" >> $GITHUB_STEP_SUMMARY
          echo "3. Check the uploaded artifacts for detailed reports" >> $GITHUB_STEP_SUMMARY
          echo "4. Re-run the workflow to validate your fixes" >> $GITHUB_STEP_SUMMARY
        else
          echo "### 🎉 All Validations Passed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Your documentation and OpenAPI specification meet all validation requirements." >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Final validation check
      shell: bash
      run: |
        echo "🔍 Performing final validation check..."
        echo ""
        echo "📊 Final Summary:"
        echo "  - Documentation directory: ${{ inputs.documentation-directory }}"
        echo "  - OpenAPI file: ${{ inputs.openapi-file }}"
        echo "  - Markdown files linted: $(find "${{ inputs.documentation-directory }}" -name "*.md" -type f 2>/dev/null | wc -l || echo "0")"
        echo "  - Markdown errors: $MARKDOWN_ERRORS"
        echo "  - OpenAPI errors: $OPENAPI_ERRORS"
        echo ""
        
        if [ "$VALIDATION_FAILED" = "true" ]; then
          # Check if we have actual validation errors (not just missing files)
          total_errors=$((MARKDOWN_ERRORS + OPENAPI_ERRORS))
          
          if [ $total_errors -gt 0 ]; then
            echo "❌ Validation FAILED - Found $total_errors validation issues"
            echo ""
            echo "📄 Generated reports:"
            echo "  - spectral-report.json (machine-readable)"
            echo "  - spectral-report.md (human-readable)"
            echo "  - validation-errors.md (error log)"
            echo ""
            echo "📋 GitHub Step Summary has been updated with detailed results and error information"
            echo ""
            echo "Please review the errors above and in the step summary, then fix the issues before re-running."
            exit 1
          else
            # Only input validation failed (missing files), but no actual linting errors
            echo "⚠️  Input validation issues detected, but no linting errors found"
            echo ""
            echo "📋 GitHub Step Summary has been updated with detailed results"
            echo ""
            echo "Note: Missing files or directories were detected. Please check your repository structure."
          fi
        else
          echo "✅ All validation checks passed!"
          echo ""
          echo "📄 Generated reports:"
          echo "  - spectral-report.json (machine-readable)"
          echo "  - spectral-report.md (human-readable)"
          echo ""
          echo "📋 GitHub Step Summary has been updated with detailed results"
        fi

branding:
  icon: 'check-circle'
  color: 'green'