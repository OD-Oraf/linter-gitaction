name: 'Documentation and API Validation Action'
description: 'Lint markdown files using markdownlint-cli and validate OpenAPI specifications using Spectral'
author: 'OD-Oraf'

inputs:
  documentation-directory:
    description: 'Directory containing markdown files to lint'
    required: true
    default: './documentation'
  openapi-file:
    description: 'Path to OpenAPI specification file'
    required: true
    default: './openapi.yaml'
  categories-file:
    description: 'Path to categories file'
    required: true
    default: './categories.json'

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install CLI tools
      shell: bash
      run: |
        echo "=================================================="
        echo "üîß INSTALLING CLI TOOLS"
        echo "=================================================="
        npm install -g markdownlint-cli
        npm install -g @stoplight/spectral-cli
        echo "‚úÖ Node.js tools installed"
        
    - name: Setup Python environment for validation
      shell: bash
      run: |
        echo "=================================================="
        echo "üêç SETTING UP PYTHON ENVIRONMENT"
        echo "=================================================="
        echo "üîç Python version: $(python3 --version)"
        echo "üîç Pip version: $(pip3 --version)"
        
        # Setup Python environment in the action directory
        cd "${{ github.action_path }}/local-development"
        
        # Create virtual environment if it doesn't exist
        if [ ! -d ".venv" ]; then
          echo "üêç Creating Python virtual environment..."
          python3 -m venv .venv
        else
          echo "üêç Using existing virtual environment..."
        fi
        
        # Activate virtual environment and install dependencies
        source .venv/bin/activate
        echo "üîç Virtual environment Python: $(which python3)"
        
        # Install/upgrade pip
        python3 -m pip install --upgrade pip
        
        # Install dependencies
        if [ -f "requirements.txt" ]; then
          echo "üì¶ Installing Python dependencies from requirements.txt..."
          pip install -r requirements.txt
          echo "‚úÖ Python dependencies installed"
        else
          echo "üì¶ Installing jsonschema directly..."
          pip install jsonschema==4.21.1
          echo "‚úÖ jsonschema installed"
        fi
        
        # Verify installation
        echo "üîç Installed packages:"
        pip list | grep jsonschema || echo "‚ùå jsonschema not found"
        
        echo "‚úÖ Python environment setup complete"
        
    - name: Initialize validation state
      shell: bash
      run: |
        echo "=================================================="
        echo "üöÄ INITIALIZING VALIDATION STATE"
        echo "=================================================="
        echo "VALIDATION_FAILED=false" >> $GITHUB_ENV
        echo "MARKDOWN_ERRORS=0" >> $GITHUB_ENV
        echo "OPENAPI_ERRORS=0" >> $GITHUB_ENV
        echo "JSON_ERRORS=0" >> $GITHUB_ENV
        echo "# Validation Error Log" > validation-errors.md
        echo "" >> validation-errors.md
        echo "‚úÖ Validation state initialized"
        echo "=================================================="
        
    - name: Validate inputs
      shell: bash
      run: |
        echo "=================================================="
        echo "üîç VALIDATING INPUT PARAMETERS"
        echo "=================================================="
        echo "üìÅ Documentation directory: ${{ inputs.documentation-directory }}"
        echo "üìÑ OpenAPI file: ${{ inputs.openapi-file }}"
        echo "üìã Categories file: ${{ inputs.categories-file }}"
        echo ""
        if [ ! -d "${{ inputs.documentation-directory }}" ]; then
          echo "‚ùå Error: Documentation directory '${{ inputs.documentation-directory }}' does not exist"
          echo "## ‚ùå Input Validation Errors" >> validation-errors.md
          echo "- Documentation directory '${{ inputs.documentation-directory }}' does not exist" >> validation-errors.md
          echo "" >> validation-errors.md
          echo "VALIDATION_FAILED=true" >> $GITHUB_ENV
        fi
        
        if [ ! -f "${{ inputs.openapi-file }}" ]; then
          echo "Error: OpenAPI file '${{ inputs.openapi-file }}' does not exist"
          echo "## ‚ùå Input Validation Errors" >> validation-errors.md
          echo "- OpenAPI file '${{ inputs.openapi-file }}' does not exist" >> validation-errors.md
          echo "" >> validation-errors.md
          echo "VALIDATION_FAILED=true" >> $GITHUB_ENV
        fi
        
        echo "üîç Validating OpenAPI file format: ${{ inputs.openapi-file }}"
        
        # Check if file has .yaml or .yml extension
        if [[ "${{ inputs.openapi-file }}" =~ \.(yaml|yml)$ ]]; then
          echo "‚úÖ OpenAPI file has valid YAML extension"
        elif [[ "${{ inputs.openapi-file }}" =~ \.json$ ]]; then
          echo "‚úÖ OpenAPI file has valid JSON extension"
        else
          echo "‚ö†Ô∏è  OpenAPI file extension is not .yaml, .yml, or .json"
        fi
        
        # Basic file validation
        if [ -s "${{ inputs.openapi-file }}" ]; then
          echo "‚úÖ OpenAPI file is not empty"
        else
          echo "‚ùå OpenAPI file is empty"
          echo "VALIDATION_FAILED=true" >> $GITHUB_ENV
          echo "## ‚ùå OpenAPI File Validation Errors" >> validation-errors.md
          echo "- OpenAPI file is empty" >> validation-errors.md
          echo "" >> validation-errors.md
        fi
        
        echo "‚úÖ Input validation passed"
        echo "üìÅ Documentation directory: ${{ inputs.documentation-directory }}"
        echo "üìÑ OpenAPI file: ${{ inputs.openapi-file }}"

    - name: Lint markdown files
      shell: bash
      run: |
        echo "=================================================="
        echo "üìù LINTING MARKDOWN FILES"
        echo "=================================================="
        echo "üîç Scanning directory: ${{ inputs.documentation-directory }}"
        echo "üìã Using config: ${{ github.action_path }}/documentation-config/.markdownlint.json"
        echo ""
        
        # Initialize markdown validation state
        markdown_errors=0
        
        # Count markdown files
        md_count=$(find "${{ inputs.documentation-directory }}" -name "*.md" -type f | wc -l)
        echo "Found $md_count markdown file(s) to lint"
        
        if [ $md_count -eq 0 ]; then
          echo "‚ö†Ô∏è  No markdown files found in ${{ inputs.documentation-directory }}"
          exit 0
        fi
           
        # Run markdownlint and capture output
        if ! markdownlint "${{ inputs.documentation-directory }}/**/*.md" --config "${{ github.action_path }}/documentation-config/.markdownlint.json" > markdownlint-output.txt 2>&1; then
          echo "‚ùå Markdown linting failed"
          echo "VALIDATION_FAILED=true" >> $GITHUB_ENV
          
          # Count errors
          error_count=$(wc -l < markdownlint-output.txt || echo "0")
          echo "MARKDOWN_ERRORS=$error_count" >> $GITHUB_ENV
          
          # Add errors to validation log
          echo "## ‚ùå Markdown Linting Errors ($error_count issues)" >> validation-errors.md
          echo "" >> validation-errors.md
          echo '```' >> validation-errors.md
          cat markdownlint-output.txt >> validation-errors.md
          echo '```' >> validation-errors.md
          echo "" >> validation-errors.md
          
          # Display errors in console
          cat markdownlint-output.txt
        else
          echo "‚úÖ All markdown files passed linting!"
        fi
        
        echo ""
        echo "=================================================="
        echo "‚úÖ MARKDOWN LINTING COMPLETED"
        echo "=================================================="

    - name: Validate Categories file against schema
      shell: bash
      run: |
        echo "=================================================="
        echo "üìã VALIDATING CATEGORIES FILE"
        echo "=================================================="
        echo "üîç Categories file: ${{ inputs.categories-file }}"
        echo "üîç Schema file: categories-schema.json"
        echo ""
        
        # Initialize error count
        json_errors=0
        
        if [ -f "${{ inputs.categories-file }}" ]; then
          echo "üìÑ Validating ${{ inputs.categories-file }} against schema..."
          
          if [ -f "${{ github.action_path }}/categories-config/categories-schema.json" ]; then
            echo "üîç Running validation with Python validator..."
            
            # Use the pre-configured Python environment
            cd "${{ github.action_path }}/local-development"
            source .venv/bin/activate
            
            # Run validation with JSON output
            echo "üîç Running categories validation..."
            if python3 validate_categories.py "${{ github.workspace }}/${{ inputs.categories-file }}" "${{ github.action_path }}/categories-config/categories-schema.json" --json > validation-result.json 2>&1; then
              echo "‚úÖ Categories file passed schema validation!"
              json_errors=0
              
              # Create empty errors file for consistency
              echo "[]" > categories-errors.json
            else
              echo "‚ùå Categories file failed schema validation"
              
              # Extract validation results
              if [ -f "validation-result.json" ]; then
                cp validation-result.json categories-errors.json
                
                # Count errors from JSON output
                json_errors=$(jq '.errors | length' categories-errors.json 2>/dev/null || echo "1")
                
                echo "üìä Found $json_errors validation error(s)"
                
                # Show human-readable errors
                echo ""
                echo "üîç Validation errors:"
                jq -r '.errors[] | "‚ùå TagKey: \(.tagKey // "Unknown")\n   Invalid: \(.invalidValues // [.invalidValue] | join(", "))\n   Allowed: \(.allowedValues // ["N/A"] | join(", "))\n"' categories-errors.json 2>/dev/null || {
                  echo "‚ùå Error parsing validation results"
                  cat validation-result.json
                }
              else
                echo "‚ùå Validation failed - no results file generated"
                json_errors=1
                echo '{"valid": false, "errors": [{"message": "Validation failed - no results generated"}], "summary": "Validation error"}' > categories-errors.json
              fi
            fi
            
            # Generate markdown report if there are errors
            if [ $json_errors -gt 0 ]; then
              echo "üìù Generating error report..."
              
              # Generate enhanced error report with tagKey and invalid values
              echo "## ‚ùå JSON Schema Validation Errors" > validation-errors.md
              echo "" >> validation-errors.md
              echo "### Categories file validation failed:" >> validation-errors.md
              echo "**File:** \`${{ inputs.categories-file }}\`" >> validation-errors.md
              echo "**Schema:** \`categories-schema.json\`" >> validation-errors.md
              echo "**Tool:** Python JSON Schema Validator" >> validation-errors.md
              echo "" >> validation-errors.md
              
              # Enhanced error reporting with tagKey context
              if command -v jq >/dev/null 2>&1 && [ -f "categories-errors.json" ]; then
                echo "**Detailed Validation Errors:**" >> validation-errors.md
                echo "" >> validation-errors.md
                
                # Check if we have structured errors
                if jq -e '.errors[0].tagKey' categories-errors.json >/dev/null 2>&1; then
                  echo "| TagKey | Invalid Values | Allowed Values |" >> validation-errors.md
                  echo "|--------|----------------|----------------|" >> validation-errors.md
                  
                  # Process each structured error
                  jq -r '.errors[] | "| **\(.tagKey)** | `\(.invalidValues | join("`, `"))` | \(.allowedValues | join(", ")) |"' categories-errors.json >> validation-errors.md 2>/dev/null
                else
                  echo "| Issue | Details |" >> validation-errors.md
                  echo "|-------|---------|" >> validation-errors.md
                  jq -r '.errors[] | "| \(.message // "Validation error") | \(.path // "N/A") |"' categories-errors.json >> validation-errors.md 2>/dev/null
                fi
                
                echo "" >> validation-errors.md
              fi
              
              # Raw JSON errors for reference
              echo "### Raw validation results:" >> validation-errors.md
              echo "" >> validation-errors.md
              echo '```json' >> validation-errors.md
              cat categories-errors.json >> validation-errors.md
              echo '```' >> validation-errors.md
              echo "" >> validation-errors.md
            fi
            
            # Copy results back to workspace
            if [ -f "categories-errors.json" ]; then
              cp categories-errors.json "${{ github.workspace }}/"
            fi
            if [ -f "validation-errors.md" ]; then
              cp validation-errors.md "${{ github.workspace }}/"
            fi
            
          else
            echo "‚ùå Schema file not found: ${{ github.action_path }}/categories-config/categories-schema.json"
            echo "VALIDATION_FAILED=true" >> $GITHUB_ENV
            json_errors=1
          fi
        else
          echo "‚ö†Ô∏è  Categories file ${{ inputs.categories-file }} not found, skipping validation"
          # Create empty JSON array when file doesn't exist for consistent processing downstream
          echo '{"valid": true, "errors": [], "summary": "File not found - skipped validation"}' > "${{ github.workspace }}/categories-errors.json"
          json_errors=0
        fi
        
        # Store JSON error count
        echo "JSON_ERRORS=$json_errors" >> $GITHUB_ENV
        
        if [ $json_errors -eq 0 ]; then
          echo "‚úÖ Categories file passed schema validation!"
        else
          echo "‚ùå Found $json_errors JSON schema validation error(s)"
        fi
        
        echo ""
        echo "=================================================="
        echo "‚úÖ CATEGORIES VALIDATION COMPLETED"
        echo "=================================================="

    - name: Lint OpenAPI specification with Spectral
      shell: bash
      run: |
        echo "=================================================="
        echo "üîß LINTING OPENAPI SPECIFICATION"
        echo "=================================================="
        echo "üîç OpenAPI file: ${{ inputs.openapi-file }}"
        echo "üìã Spectral ruleset: ${{ github.action_path }}/api-spec-config/.spectral.yaml"
        echo ""
        
        echo "üîç Linting OpenAPI specification: ${{ inputs.openapi-file }}"
        
        # Run Spectral
        spectral lint "${{ inputs.openapi-file }}" --ruleset ${{ github.action_path}}/api-spec-config/.spectral.yaml --format stylish
         
        # Generate JSON report for detailed analysis
        spectral lint "${{ inputs.openapi-file }}" --ruleset ${{ github.action_path}}/api-spec-config/.spectral.yaml --format json > spectral-report.json 2>/dev/null || echo "[]" > spectral-report.json
        
        # Generate human-readable report
        echo "## OpenAPI Validation Report" > spectral-report.md
        echo "" >> spectral-report.md
        echo "**File:** \`${{ inputs.openapi-file }}\`" >> spectral-report.md
        echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> spectral-report.md
        echo "" >> spectral-report.md
        
        # Count issues by severity
        error_count=$(jq '[.[] | select(.severity == 0)] | length' spectral-report.json 2>/dev/null || echo "0")
        warning_count=$(jq '[.[] | select(.severity == 1)] | length' spectral-report.json 2>/dev/null || echo "0")
        info_count=$(jq '[.[] | select(.severity == 2)] | length' spectral-report.json 2>/dev/null || echo "0")
        hint_count=$(jq '[.[] | select(.severity == 3)] | length' spectral-report.json 2>/dev/null || echo "0")
        total_issues=$((error_count + warning_count + info_count + hint_count))
        
        if [ "$total_issues" -eq 0 ]; then
          echo "**Status:** ‚úÖ No issues found" >> spectral-report.md
        else
          # Only fail on errors, not warnings/info/hints
          if [ "$error_count" -gt 0 ]; then
            echo "VALIDATION_FAILED=true" >> $GITHUB_ENV
          fi
          echo "**Status:** ‚ö†Ô∏è Found $total_issues issue(s) ($error_count errors, $warning_count warnings)" >> spectral-report.md
          echo "" >> spectral-report.md
          echo "### Issues Found:" >> spectral-report.md
          echo "" >> spectral-report.md
          
          # Convert JSON report to markdown table
          jq -r '.[] | "| \(.severity) | \(.code) | \(.path | join(".")) | \(.message) |"' spectral-report.json > temp-issues.txt 2>/dev/null || touch temp-issues.txt
          
          if [ -s temp-issues.txt ]; then
            echo "| Severity | Rule | Path | Message |" >> spectral-report.md
            echo "|----------|------|------|---------|" >> spectral-report.md
            cat temp-issues.txt >> spectral-report.md
          fi
          
          rm -f temp-issues.txt
        fi
        
        echo "üìÑ OpenAPI validation report generated: spectral-report.md"
        
        # Store error count for final validation
        echo "OPENAPI_ERRORS=$error_count" >> $GITHUB_ENV
        
        echo "üìä OpenAPI Structure Analysis:"
        echo "  - Errors: $error_count"
        echo "  - Warnings: $warning_count"
        echo "  - Info: $info_count"
        echo "  - Hints: $hint_count"
        
        if [ "$error_count" -gt 0 ]; then
          echo "‚ùå OpenAPI specification has structural errors that must be fixed"
          
          # Add OpenAPI errors to validation log
          echo "## ‚ùå OpenAPI Structural Errors ($error_count errors)" >> validation-errors.md
          echo "" >> validation-errors.md
          jq -r '.[] | select(.severity == 0) | "- **\(.code)**: \(.message) (Path: \(.path | join(".")))"' spectral-report.json >> validation-errors.md 2>/dev/null || echo "- Error parsing OpenAPI issues" >> validation-errors.md
          echo "" >> validation-errors.md
        else
          echo "‚úÖ OpenAPI specification structure is valid"
        fi
        
        echo ""
        echo "=================================================="
        echo "‚úÖ OPENAPI VALIDATION COMPLETED"
        echo "=================================================="

    - name: Generate GitHub Step Summary
      shell: bash
      run: |
        echo "=================================================="
        echo "üìä GENERATING GITHUB STEP SUMMARY"
        echo "=================================================="
        echo "üìù Creating validation report..."
        echo ""
        
        echo "# üìã Documentation and API Validation Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Validation completed at:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Overall status
        if [ "$VALIDATION_FAILED" = "true" ]; then
          echo "## ‚ùå Overall Status: FAILED" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ‚úÖ Overall Status: PASSED" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Summary table
        echo "## üìä Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status | Errors | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        
        # Markdown row
        md_count=$(find "${{ inputs.documentation-directory }}" -name "*.md" -type f | wc -l)
        if [ $md_count -eq 0 ]; then
          echo "| üìù Markdown | ‚ö†Ô∏è No files | 0 | $md_count files found |" >> $GITHUB_STEP_SUMMARY
        elif [ "$MARKDOWN_ERRORS" -gt 0 ]; then
          echo "| üìù Markdown | ‚ùå Failed | $MARKDOWN_ERRORS | $md_count files processed |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| üìù Markdown | ‚úÖ Passed | 0 | $md_count files processed |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # OpenAPI row
        if [ "$OPENAPI_ERRORS" -gt 0 ]; then
          echo "| üîç OpenAPI | ‚ùå Failed | $OPENAPI_ERRORS | Spectral validation |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| üîç OpenAPI | ‚úÖ Passed | 0 | Spectral validation |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Categories row
        if [ "$JSON_ERRORS" -gt 0 ]; then
          echo "| üìã Categories | ‚ùå Failed | $JSON_ERRORS | Schema validation |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| üìã Categories | ‚úÖ Passed | 0 | Schema validation |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Detailed Markdown Section
        echo "## üìù Markdown Linting Details" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Directory:** \`${{ inputs.documentation-directory }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Files found:** $md_count markdown files" >> $GITHUB_STEP_SUMMARY
        echo "- **Tool:** markdownlint-cli" >> $GITHUB_STEP_SUMMARY
        
        if [ $md_count -eq 0 ]; then
          echo "- **Result:** ‚ö†Ô∏è No markdown files found to lint" >> $GITHUB_STEP_SUMMARY
        elif [ "$MARKDOWN_ERRORS" -gt 0 ]; then
          echo "- **Result:** ‚ùå Found $MARKDOWN_ERRORS linting issues" >> $GITHUB_STEP_SUMMARY
          
          # Show markdown errors in this section
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîç Markdown Linting Errors" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f validation-errors.md ]; then
            # Extract markdown-specific errors from validation-errors.md
            if grep -q "## Markdown Linting" validation-errors.md; then
              sed -n '/## Markdown Linting/,/^## /p' validation-errors.md | sed '$d' >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùå Markdown linting failed with $MARKDOWN_ERRORS error(s). Check the validation logs for details." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ùå Markdown linting failed with $MARKDOWN_ERRORS error(s). Check the validation logs for details." >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "- **Result:** ‚úÖ All markdown files passed linting" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Detailed OpenAPI Section
        echo "## üîç OpenAPI Validation Details" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **File:** \`${{ inputs.openapi-file }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Tool:** Spectral CLI" >> $GITHUB_STEP_SUMMARY
        echo "- **Ruleset:** \`.spectral.yaml\`" >> $GITHUB_STEP_SUMMARY
        
        if [ -f spectral-report.json ]; then
          error_count=$(jq '[.[] | select(.severity == 0)] | length' spectral-report.json 2>/dev/null || echo "0")
          warning_count=$(jq '[.[] | select(.severity == 1)] | length' spectral-report.json 2>/dev/null || echo "0")
          info_count=$(jq '[.[] | select(.severity == 2)] | length' spectral-report.json 2>/dev/null || echo "0")
          hint_count=$(jq '[.[] | select(.severity == 3)] | length' spectral-report.json 2>/dev/null || echo "0")
          
          if [ "$error_count" -gt 0 ]; then
            echo "- **Result:** ‚ùå Found $error_count error(s), $warning_count warning(s)" >> $GITHUB_STEP_SUMMARY
            
            # Show OpenAPI errors in this section
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üîç OpenAPI Validation Errors" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Show errors table
            echo "| Severity | Rule | Path | Message |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|------|------|---------|" >> $GITHUB_STEP_SUMMARY
            
            # Extract errors (severity 0) and warnings (severity 1)
            jq -r '.[] | select(.severity <= 1) | "| \(if .severity == 0 then "‚ùå Error" else "‚ö†Ô∏è Warning" end) | `\(.code)` | `\(.path // "N/A")` | \(.message) |"' spectral-report.json >> $GITHUB_STEP_SUMMARY 2>/dev/null
            
          elif [ "$warning_count" -gt 0 ]; then
            echo "- **Result:** ‚ö†Ô∏è Found $warning_count warning(s), $info_count info(s)" >> $GITHUB_STEP_SUMMARY
            
            # Show OpenAPI warnings in this section
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üîç OpenAPI Validation Warnings" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Show warnings table
            echo "| Severity | Rule | Path | Message |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|------|------|---------|" >> $GITHUB_STEP_SUMMARY
            
            # Extract warnings and info
            jq -r '.[] | select(.severity >= 1 and .severity <= 2) | "| \(if .severity == 1 then "‚ö†Ô∏è Warning" else "‚ÑπÔ∏è Info" end) | `\(.code)` | `\(.path // "N/A")` | \(.message) |"' spectral-report.json >> $GITHUB_STEP_SUMMARY 2>/dev/null
            
          else
            echo "- **Result:** ‚úÖ No issues found" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "- **Result:** ‚úÖ Validation passed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Detailed Categories Section
        echo "## üìã Categories Schema Validation Details" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **File:** \`${{ inputs.categories-file }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Schema:** \`categories-schema.json\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Tool:** Python JSON Schema Validator" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "${{ inputs.categories-file }}" ]; then
          if [ "$JSON_ERRORS" -eq 0 ]; then
            echo "- **Result:** ‚úÖ Categories file passed schema validation" >> $GITHUB_STEP_SUMMARY
            
            # Show validated items count
            item_count=$(jq 'length' "${{ inputs.categories-file }}" 2>/dev/null || echo "0")
            echo "- **Items validated:** $item_count categories" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Result:** ‚ùå Found $JSON_ERRORS schema validation error(s)" >> $GITHUB_STEP_SUMMARY
            
            # Show categories errors in this section
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üîç Categories Validation Errors" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Add structured error summary if available
            if [ -f "categories-errors.json" ]; then
              # Check if we have structured errors with tagKey
              if jq -e '.errors[0].tagKey' categories-errors.json >/dev/null 2>&1; then
                echo "| TagKey | Invalid Values | Allowed Values |" >> $GITHUB_STEP_SUMMARY
                echo "|--------|----------------|----------------|" >> $GITHUB_STEP_SUMMARY
                
                # Process each structured error for summary
                jq -r '.errors[] | "| **\(.tagKey)** | `\(.invalidValues | join("`, `"))` | \(.allowedValues | join(", ")) |"' categories-errors.json >> $GITHUB_STEP_SUMMARY 2>/dev/null
              else
                echo "| Issue | Details |" >> $GITHUB_STEP_SUMMARY
                echo "|-------|---------|" >> $GITHUB_STEP_SUMMARY
                jq -r '.errors[] | "| \(.message // "Validation error") | \(.path // "N/A") |"' categories-errors.json >> $GITHUB_STEP_SUMMARY 2>/dev/null
              fi
              
              # Show raw JSON for debugging if needed
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "<details>" >> $GITHUB_STEP_SUMMARY
              echo "<summary>üîç Raw Validation Output (click to expand)</summary>" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo '```json' >> $GITHUB_STEP_SUMMARY
              cat categories-errors.json >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "</details>" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùå Categories validation failed with $JSON_ERRORS error(s). Check the validation logs for details." >> $GITHUB_STEP_SUMMARY
            fi
          fi
        else
          echo "- **Result:** ‚ö†Ô∏è Categories file not found, validation skipped" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Generated artifacts section
        echo "## üìÑ Generated Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The following artifacts were generated during validation:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **validation-errors.md** - Detailed error log" >> $GITHUB_STEP_SUMMARY
        echo "- **spectral-report.md** - Detailed OpenAPI validation report" >> $GITHUB_STEP_SUMMARY
        echo "- **spectral-report.json** - Machine-readable OpenAPI validation data" >> $GITHUB_STEP_SUMMARY
        echo "- **categories-errors.json** - Structured categories validation errors" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Next steps section
        if [ "$JSON_ERRORS" -gt 0 ] || [ "$OPENAPI_ERRORS" -gt 0 ] || [ "$MARKDOWN_ERRORS" -gt 0 ]; then
          echo "## üîß Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To resolve validation issues:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$MARKDOWN_ERRORS" -gt 0 ]; then
            echo "- **Markdown**: Review linting errors above and fix formatting issues" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "$OPENAPI_ERRORS" -gt 0 ]; then
            echo "- **OpenAPI**: Address the validation errors and warnings listed above" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "$JSON_ERRORS" -gt 0 ]; then
            echo "- **Categories**: Update invalid tagKey values to match allowed values shown above" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- **Artifacts**: Download validation reports for detailed analysis" >> $GITHUB_STEP_SUMMARY
          echo "- **Local Testing**: Run validation locally using the development scripts" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ‚úÖ All Validations Passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üéâ All documentation, API specifications, and data structures are valid!" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Final validation check
      shell: bash
      run: |
        echo "=================================================="
        echo "üèÅ FINAL VALIDATION CHECK"
        echo "=================================================="
        echo "üîç Checking overall validation status..."
        echo "üìä MARKDOWN_ERRORS: $MARKDOWN_ERRORS"
        echo "üìä OPENAPI_ERRORS: $OPENAPI_ERRORS" 
        echo "üìä JSON_ERRORS: $JSON_ERRORS"
        echo ""
        
        echo "üîç Performing final validation check..."
        echo ""
        echo "üìä Final Summary:"
        echo "  - Markdown errors: $MARKDOWN_ERRORS"
        echo "  - OpenAPI errors: $OPENAPI_ERRORS"
        echo "  - JSON errors: $JSON_ERRORS"
        echo ""
        
        total_errors=$((MARKDOWN_ERRORS + OPENAPI_ERRORS + JSON_ERRORS))
        
        if [ $total_errors -gt 0 ]; then
          echo "‚ùå Validation FAILED - Found $total_errors total error(s)"
          echo ""
          echo "üìÑ Generated reports:"
          echo "  - spectral-report.json (machine-readable)"
          echo "  - spectral-report.md (human-readable)"
          echo "  - validation-errors.md (error log)"
          echo ""
          echo "üìã GitHub Step Summary has been updated with detailed results and error information"
          echo ""
          echo "Please review the errors above and in the step summary, then fix the issues before re-running."
          echo ""
          echo "=================================================="
          echo "‚ùå VALIDATION FAILED - BUILD WILL FAIL"
          echo "=================================================="
          exit 1
        else
          echo "‚úÖ All validation checks passed!"
          echo ""
          echo "üìÑ Generated reports:"
          echo "  - spectral-report.json (machine-readable)"
          echo "  - spectral-report.md (human-readable)"
          echo ""
          echo "üìã GitHub Step Summary has been updated with validation results"
          echo ""
          echo "=================================================="
          echo "üéâ ALL VALIDATIONS PASSED - BUILD SUCCESS"
          echo "=================================================="
        fi

branding:
  icon: 'check-circle'
  color: 'green'