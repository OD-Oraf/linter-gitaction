name: 'Documentation and API Validation Action'
description: 'Lint markdown files using markdownlint-cli and validate OpenAPI specifications using Spectral'
author: 'OD-Oraf'

inputs:
  documentation-directory:
    description: 'Directory containing markdown files to lint'
    required: true
    default: './documentation'
  openapi-file:
    description: 'Path to OpenAPI specification file'
    required: true
    default: './openapi.yaml'
  categories-file:
    description: 'Path to categories file'
    required: true
    default: './categories.json'

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install CLI tools
      shell: bash
      run: |
        echo "=================================================="
        echo "🔧 INSTALLING CLI TOOLS"
        echo "=================================================="
        npm install -g markdownlint-cli
        npm install -g @stoplight/spectral-cli
        npm install -g ajv-cli
        echo "✅ Installed markdownlint-cli, spectral-cli, and ajv-cli"
        echo "=================================================="
      
    - name: Initialize validation state
      shell: bash
      run: |
        echo "=================================================="
        echo "🚀 INITIALIZING VALIDATION STATE"
        echo "=================================================="
        echo "VALIDATION_FAILED=false" >> $GITHUB_ENV
        echo "MARKDOWN_ERRORS=0" >> $GITHUB_ENV
        echo "OPENAPI_ERRORS=0" >> $GITHUB_ENV
        echo "JSON_ERRORS=0" >> $GITHUB_ENV
        echo "# Validation Error Log" > validation-errors.md
        echo "" >> validation-errors.md
        echo "✅ Validation state initialized"
        echo "=================================================="
        
    - name: Validate inputs
      shell: bash
      run: |
        echo "=================================================="
        echo "🔍 VALIDATING INPUT PARAMETERS"
        echo "=================================================="
        echo "📁 Documentation directory: ${{ inputs.documentation-directory }}"
        echo "📄 OpenAPI file: ${{ inputs.openapi-file }}"
        echo "📋 Categories file: ${{ inputs.categories-file }}"
        echo ""
        if [ ! -d "${{ inputs.documentation-directory }}" ]; then
          echo "❌ Error: Documentation directory '${{ inputs.documentation-directory }}' does not exist"
          echo "## ❌ Input Validation Errors" >> validation-errors.md
          echo "- Documentation directory '${{ inputs.documentation-directory }}' does not exist" >> validation-errors.md
          echo "" >> validation-errors.md
          echo "VALIDATION_FAILED=true" >> $GITHUB_ENV
        fi
        
        if [ ! -f "${{ inputs.openapi-file }}" ]; then
          echo "Error: OpenAPI file '${{ inputs.openapi-file }}' does not exist"
          echo "## ❌ Input Validation Errors" >> validation-errors.md
          echo "- OpenAPI file '${{ inputs.openapi-file }}' does not exist" >> validation-errors.md
          echo "" >> validation-errors.md
          echo "VALIDATION_FAILED=true" >> $GITHUB_ENV
        fi
        
        echo "🔍 Validating OpenAPI file format: ${{ inputs.openapi-file }}"
        
        # Check if file has .yaml or .yml extension
        if [[ "${{ inputs.openapi-file }}" =~ \.(yaml|yml)$ ]]; then
          echo "✅ OpenAPI file has valid YAML extension"
        elif [[ "${{ inputs.openapi-file }}" =~ \.json$ ]]; then
          echo "✅ OpenAPI file has valid JSON extension"
        else
          echo "⚠️  OpenAPI file extension is not .yaml, .yml, or .json"
        fi
        
        # Basic file validation
        if [ -s "${{ inputs.openapi-file }}" ]; then
          echo "✅ OpenAPI file is not empty"
        else
          echo "❌ OpenAPI file is empty"
          echo "VALIDATION_FAILED=true" >> $GITHUB_ENV
          echo "## ❌ OpenAPI File Validation Errors" >> validation-errors.md
          echo "- OpenAPI file is empty" >> validation-errors.md
          echo "" >> validation-errors.md
        fi
        
        echo "✅ Input validation passed"
        echo "📁 Documentation directory: ${{ inputs.documentation-directory }}"
        echo "📄 OpenAPI file: ${{ inputs.openapi-file }}"

    - name: Lint markdown files
      shell: bash
      run: |
        echo "=================================================="
        echo "📝 LINTING MARKDOWN FILES"
        echo "=================================================="
        echo "🔍 Scanning directory: ${{ inputs.documentation-directory }}"
        echo "📋 Using config: ${{ github.action_path }}/documentation-config/.markdownlint.json"
        echo ""
        
        # Initialize markdown validation state
        markdown_errors=0
        
        # Count markdown files
        md_count=$(find "${{ inputs.documentation-directory }}" -name "*.md" -type f | wc -l)
        echo "Found $md_count markdown file(s) to lint"
        
        if [ $md_count -eq 0 ]; then
          echo "⚠️  No markdown files found in ${{ inputs.documentation-directory }}"
          exit 0
        fi
           
        # Run markdownlint and capture output
        if ! markdownlint "${{ inputs.documentation-directory }}/**/*.md" --config "${{ github.action_path }}/documentation-config/.markdownlint.json" > markdownlint-output.txt 2>&1; then
          echo "❌ Markdown linting failed"
          echo "VALIDATION_FAILED=true" >> $GITHUB_ENV
          
          # Count errors
          error_count=$(wc -l < markdownlint-output.txt || echo "0")
          echo "MARKDOWN_ERRORS=$error_count" >> $GITHUB_ENV
          
          # Add errors to validation log
          echo "## ❌ Markdown Linting Errors ($error_count issues)" >> validation-errors.md
          echo "" >> validation-errors.md
          echo '```' >> validation-errors.md
          cat markdownlint-output.txt >> validation-errors.md
          echo '```' >> validation-errors.md
          echo "" >> validation-errors.md
          
          # Display errors in console
          cat markdownlint-output.txt
        else
          echo "✅ All markdown files passed linting!"
        fi
        
        echo ""
        echo "=================================================="
        echo "✅ MARKDOWN LINTING COMPLETED"
        echo "=================================================="

    - name: Validate Categories file against schema
      shell: bash
      run: |
        echo "=================================================="
        echo "📋 VALIDATING CATEGORIES FILE"
        echo "=================================================="
        echo "🔍 Categories file: ${{ inputs.categories-file }}"
        echo "📋 Schema file: ${{ github.action_path }}/categories-config/categories-schema.json"
        echo ""
        
        echo "🔍 Validating categories file against schema..."
        
        # Initialize JSON validation state
        json_errors=0
        
        # Validate categories file if it exists
        if [ -f "${{ inputs.categories-file }}" ]; then
          echo "📄 Validating ${{ inputs.categories-file }} against schema..."
          
          if [ -f "${{ github.action_path }}/categories-config/categories-schema.json" ]; then
            # Run AJV with JSON output for better parsing
            if ajv validate -s "${{ github.action_path }}/categories-config/categories-schema.json" -d "${{ inputs.categories-file }}" --errors=json --strict=false > ajv-errors.json 2>&1; then
              echo "✅ Categories file is valid"
              echo "[]" > ajv-errors.json  # Empty array for successful validation
            else
              echo "❌ Categories file validation failed"
              echo "VALIDATION_FAILED=true" >> $GITHUB_ENV
              json_errors=$((json_errors + 1))
              
              # Generate enhanced error report with tagKey and invalid values
              echo "## ❌ JSON Schema Validation Errors" >> validation-errors.md
              echo "" >> validation-errors.md
              echo "### Categories file validation failed:" >> validation-errors.md
              echo "**File:** \`${{ inputs.categories-file }}\`" >> validation-errors.md
              echo "**Schema:** \`categories-schema.json\`" >> validation-errors.md
              echo "" >> validation-errors.md
              
              # Enhanced error reporting with tagKey context
              if command -v jq >/dev/null 2>&1; then
                echo "**Detailed Validation Errors:**" >> validation-errors.md
                echo "" >> validation-errors.md
                
                # Generate enhanced error report in a more robust way
                ajv validate -s "${{ github.action_path }}/categories-config/categories-schema.json" -d "${{ inputs.categories-file }}" --errors=json --strict=false > temp-ajv-errors.json 2>/dev/null || true
                
                # Check if we have enum errors and process them
                if tail -n +2 temp-ajv-errors.json | jq -e '.[] | select(.keyword == "enum")' >/dev/null 2>&1; then
                  echo "| TagKey | Invalid Value | Allowed Values |" >> validation-errors.md
                  echo "|--------|---------------|----------------|" >> validation-errors.md
                  
                  # Process each enum error
                  tail -n +2 temp-ajv-errors.json | jq -r --slurpfile data "${{ inputs.categories-file }}" '
                  .[] | select(.keyword == "enum") | 
                  . as $error |
                  ($error.instancePath | split("/") | map(select(. != ""))) as $pathParts |
                  ($pathParts[0] | tonumber) as $index |
                  $data[0][$index].tagKey as $tagKey |
                  ($pathParts | reduce .[] as $part (
                    $data[0]; 
                    if ($part | test("^[0-9]+$")) then .[$part | tonumber] else .[$part] end
                  )) as $invalidValue |
                  "| **\($tagKey)** | `\"\($invalidValue)\"` | \($error.params.allowedValues | map("\"" + . + "\"") | join(", ")) |"
                  ' >> validation-errors.md 2>/dev/null || {
                    echo "| General | Enhanced parsing failed | See raw errors below | - |" >> validation-errors.md
                  }
                else
                  echo "_No enum validation errors found in JSON output._" >> validation-errors.md
                fi
                
                # Clean up temp file
                rm -f temp-ajv-errors.json
                echo "" >> validation-errors.md
              fi
              
              # Fallback: Add human-readable error details
              echo "**Raw Validation Output:**" >> validation-errors.md
              echo '```' >> validation-errors.md
              ajv validate -s "${{ github.action_path }}/categories-config/categories-schema.json" -d "${{ inputs.categories-file }}" --errors=text --verbose --strict=false 2>&1 || true >> validation-errors.md
              echo '```' >> validation-errors.md
              echo "" >> validation-errors.md
            fi
          else
            echo "⚠️  categories-schema.json not found at ${{ github.action_path }}/categories-config/, skipping validation"
          fi
        else
          echo "⚠️  Categories file ${{ inputs.categories-file }} not found, skipping validation"
          echo "[]" > ajv-errors.json  # Empty array when file doesn't exist
        fi
        
        # Store JSON error count
        echo "JSON_ERRORS=$json_errors" >> $GITHUB_ENV
        
        if [ $json_errors -eq 0 ]; then
          echo "✅ Categories file passed schema validation!"
        else
          echo "❌ Found $json_errors JSON schema validation error(s)"
        fi
        
        echo ""
        echo "=================================================="
        echo "✅ CATEGORIES VALIDATION COMPLETED"
        echo "=================================================="

    - name: Lint OpenAPI specification with Spectral
      shell: bash
      run: |
        echo "=================================================="
        echo "🔧 LINTING OPENAPI SPECIFICATION"
        echo "=================================================="
        echo "🔍 OpenAPI file: ${{ inputs.openapi-file }}"
        echo "📋 Spectral ruleset: ${{ github.action_path }}/api-spec-config/.spectral.yaml"
        echo ""
        
        echo "🔍 Linting OpenAPI specification: ${{ inputs.openapi-file }}"
        
        # Run Spectral
        spectral lint "${{ inputs.openapi-file }}" --ruleset ${{ github.action_path}}/api-spec-config/.spectral.yaml --format stylish
         
        # Generate JSON report for detailed analysis
        spectral lint "${{ inputs.openapi-file }}" --ruleset ${{ github.action_path}}/api-spec-config/.spectral.yaml --format json > spectral-report.json 2>/dev/null || echo "[]" > spectral-report.json
        
        # Generate human-readable report
        echo "## OpenAPI Validation Report" > spectral-report.md
        echo "" >> spectral-report.md
        echo "**File:** \`${{ inputs.openapi-file }}\`" >> spectral-report.md
        echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> spectral-report.md
        echo "" >> spectral-report.md
        
        # Count issues by severity
        error_count=$(jq '[.[] | select(.severity == 0)] | length' spectral-report.json 2>/dev/null || echo "0")
        warning_count=$(jq '[.[] | select(.severity == 1)] | length' spectral-report.json 2>/dev/null || echo "0")
        info_count=$(jq '[.[] | select(.severity == 2)] | length' spectral-report.json 2>/dev/null || echo "0")
        hint_count=$(jq '[.[] | select(.severity == 3)] | length' spectral-report.json 2>/dev/null || echo "0")
        total_issues=$((error_count + warning_count + info_count + hint_count))
        
        if [ "$total_issues" -eq 0 ]; then
          echo "**Status:** ✅ No issues found" >> spectral-report.md
        else
          # Only fail on errors, not warnings/info/hints
          if [ "$error_count" -gt 0 ]; then
            echo "VALIDATION_FAILED=true" >> $GITHUB_ENV
          fi
          echo "**Status:** ⚠️ Found $total_issues issue(s) ($error_count errors, $warning_count warnings)" >> spectral-report.md
          echo "" >> spectral-report.md
          echo "### Issues Found:" >> spectral-report.md
          echo "" >> spectral-report.md
          
          # Convert JSON report to markdown table
          jq -r '.[] | "| \(.severity) | \(.code) | \(.path | join(".")) | \(.message) |"' spectral-report.json > temp-issues.txt 2>/dev/null || touch temp-issues.txt
          
          if [ -s temp-issues.txt ]; then
            echo "| Severity | Rule | Path | Message |" >> spectral-report.md
            echo "|----------|------|------|---------|" >> spectral-report.md
            cat temp-issues.txt >> spectral-report.md
          fi
          
          rm -f temp-issues.txt
        fi
        
        echo "📄 OpenAPI validation report generated: spectral-report.md"
        
        # Store error count for final validation
        echo "OPENAPI_ERRORS=$error_count" >> $GITHUB_ENV
        
        echo "📊 OpenAPI Structure Analysis:"
        echo "  - Errors: $error_count"
        echo "  - Warnings: $warning_count"
        echo "  - Info: $info_count"
        echo "  - Hints: $hint_count"
        
        if [ "$error_count" -gt 0 ]; then
          echo "❌ OpenAPI specification has structural errors that must be fixed"
          
          # Add OpenAPI errors to validation log
          echo "## ❌ OpenAPI Structural Errors ($error_count errors)" >> validation-errors.md
          echo "" >> validation-errors.md
          jq -r '.[] | select(.severity == 0) | "- **\(.code)**: \(.message) (Path: \(.path | join(".")))"' spectral-report.json >> validation-errors.md 2>/dev/null || echo "- Error parsing OpenAPI issues" >> validation-errors.md
          echo "" >> validation-errors.md
        else
          echo "✅ OpenAPI specification structure is valid"
        fi
        
        echo ""
        echo "=================================================="
        echo "✅ OPENAPI VALIDATION COMPLETED"
        echo "=================================================="

    - name: Generate GitHub Step Summary
      shell: bash
      run: |
        echo "=================================================="
        echo "📊 GENERATING GITHUB STEP SUMMARY"
        echo "=================================================="
        echo "📝 Creating validation report..."
        echo ""
        
        echo "# 📋 Documentation and API Validation Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Validation completed at:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Overall status
        if [ "$VALIDATION_FAILED" = "true" ]; then
          echo "## ❌ Overall Status: FAILED" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ✅ Overall Status: PASSED" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Summary table
        echo "## 📊 Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status | Errors | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        
        # Markdown row
        md_count=$(find "${{ inputs.documentation-directory }}" -name "*.md" -type f | wc -l)
        if [ $md_count -eq 0 ]; then
          echo "| 📝 Markdown | ⚠️ No files | 0 | $md_count files found |" >> $GITHUB_STEP_SUMMARY
        elif [ "$MARKDOWN_ERRORS" -gt 0 ]; then
          echo "| 📝 Markdown | ❌ Failed | $MARKDOWN_ERRORS | $md_count files processed |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 📝 Markdown | ✅ Passed | 0 | $md_count files processed |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # OpenAPI row
        if [ "$OPENAPI_ERRORS" -gt 0 ]; then
          echo "| 🔍 OpenAPI | ❌ Failed | $OPENAPI_ERRORS | Spectral validation |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 🔍 OpenAPI | ✅ Passed | 0 | Spectral validation |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Categories row
        if [ "$JSON_ERRORS" -gt 0 ]; then
          echo "| 📋 Categories | ❌ Failed | $JSON_ERRORS | Schema validation |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 📋 Categories | ✅ Passed | 0 | Schema validation |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Detailed Markdown Section
        echo "## 📝 Markdown Linting Details" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Directory:** \`${{ inputs.documentation-directory }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Files found:** $md_count markdown files" >> $GITHUB_STEP_SUMMARY
        echo "- **Tool:** markdownlint-cli" >> $GITHUB_STEP_SUMMARY
        
        if [ $md_count -eq 0 ]; then
          echo "- **Result:** ⚠️ No markdown files found to lint" >> $GITHUB_STEP_SUMMARY
        elif [ "$MARKDOWN_ERRORS" -gt 0 ]; then
          echo "- **Result:** ❌ Found $MARKDOWN_ERRORS linting issues" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Result:** ✅ All markdown files passed linting" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Detailed OpenAPI Section
        echo "## 🔍 OpenAPI Validation Details" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **File:** \`${{ inputs.openapi-file }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Tool:** Spectral CLI" >> $GITHUB_STEP_SUMMARY
        echo "- **Ruleset:** \`.spectral.yaml\`" >> $GITHUB_STEP_SUMMARY
        
        if [ -f spectral-report.json ]; then
          error_count=$(jq '[.[] | select(.severity == 0)] | length' spectral-report.json 2>/dev/null || echo "0")
          warning_count=$(jq '[.[] | select(.severity == 1)] | length' spectral-report.json 2>/dev/null || echo "0")
          info_count=$(jq '[.[] | select(.severity == 2)] | length' spectral-report.json 2>/dev/null || echo "0")
          hint_count=$(jq '[.[] | select(.severity == 3)] | length' spectral-report.json 2>/dev/null || echo "0")
          
          if [ "$error_count" -gt 0 ]; then
            echo "- **Result:** ❌ Found $error_count error(s), $warning_count warning(s)" >> $GITHUB_STEP_SUMMARY
          elif [ "$warning_count" -gt 0 ]; then
            echo "- **Result:** ⚠️ Found $warning_count warning(s), $info_count info(s)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Result:** ✅ No issues found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Issue Breakdown" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Severity | Count | Description |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|-------------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔴 Errors | $error_count | Must be fixed |" >> $GITHUB_STEP_SUMMARY
          echo "| 🟡 Warnings | $warning_count | Should be reviewed |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔵 Info | $info_count | Informational |" >> $GITHUB_STEP_SUMMARY
          echo "| 💡 Hints | $hint_count | Suggestions |" >> $GITHUB_STEP_SUMMARY
          
          if [ -f spectral-report.md ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📋 Detailed Analysis" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            tail -n +4 spectral-report.md >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "- **Result:** ✅ Validation passed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Detailed Categories Section
        echo "## 📋 Categories Schema Validation Details" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **File:** \`${{ inputs.categories-file }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Schema:** \`categories-schema.json\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Tool:** AJV CLI" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "${{ inputs.categories-file }}" ]; then
          if [ "$JSON_ERRORS" -eq 0 ]; then
            echo "- **Result:** ✅ Categories file passed schema validation" >> $GITHUB_STEP_SUMMARY
            
            # Show validated items count
            if [ -f "${{ inputs.categories-file }}" ]; then
              item_count=$(jq 'length' "${{ inputs.categories-file }}" 2>/dev/null || echo "0")
              echo "- **Items validated:** $item_count categories" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- **Result:** ❌ Found $JSON_ERRORS schema validation error(s)" >> $GITHUB_STEP_SUMMARY
            
            # Parse and display JSON validation errors
            if [ -f ajv-errors.json ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### 🚨 Validation Errors" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              # Check if we have JSON errors to parse
              error_count=$(jq 'length' ajv-errors.json 2>/dev/null || echo "0")
              if [ "$error_count" -gt 0 ]; then
                # Enhanced error reporting with tagKey context
                if command -v jq >/dev/null 2>&1; then
                  echo "| TagKey | Invalid Value | Allowed Values |" >> $GITHUB_STEP_SUMMARY
                  echo "|--------|---------------|----------------|" >> $GITHUB_STEP_SUMMARY
                  
                  # Use jq to parse and format errors with tagKey context
                  jq -r --slurpfile data "${{ inputs.categories-file }}" '
                  .[] | select(.keyword == "enum") | 
                  . as $error |
                  ($error.instancePath | split("/") | map(select(. != ""))) as $pathParts |
                  ($pathParts[0] | tonumber) as $index |
                  $data[0][$index].tagKey as $tagKey |
                  ($pathParts | reduce .[] as $part (
                    $data[0]; 
                    if ($part | test("^[0-9]+$")) then .[$part | tonumber] else .[$part] end
                  )) as $invalidValue |
                  "| **\($tagKey)** | `\"\($invalidValue)\"` | \($error.params.allowedValues | map("\"" + . + "\"") | join(", ")) |"
                  ' ajv-errors.json >> $GITHUB_STEP_SUMMARY 2>/dev/null || {
                    # Fallback to basic error reporting
                    echo "| Field | Issue | Expected | Actual |" >> $GITHUB_STEP_SUMMARY
                    echo "|-------|-------|----------|--------|" >> $GITHUB_STEP_SUMMARY
                    jq -r '.[] | "| `" + (.instancePath // "/") + "` | " + .message + " | " + (if .params.allowedValues then (.params.allowedValues | join(", ")) else "N/A" end) + " | `" + (.data | tostring) + "` |"' ajv-errors.json >> $GITHUB_STEP_SUMMARY 2>/dev/null || {
                      echo "| General | Schema validation failed | See error details below | - |" >> $GITHUB_STEP_SUMMARY
                    }
                  }
                else
                  # Fallback when jq is not available
                  echo "| Field | Issue | Expected | Actual |" >> $GITHUB_STEP_SUMMARY
                  echo "|-------|-------|----------|--------|" >> $GITHUB_STEP_SUMMARY
                  echo "| General | Schema validation failed | See error details below | - |" >> $GITHUB_STEP_SUMMARY
                fi
                
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "### 📋 Error Details" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo '```json' >> $GITHUB_STEP_SUMMARY
                jq '.' ajv-errors.json >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "Error parsing validation results" >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
              else
                echo "- Validation failed but no detailed errors available" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          fi
        else
          echo "- **Result:** ⚠️ Categories file not found" >> $GITHUB_STEP_SUMMARY
          echo "- **Expected location:** \`${{ inputs.categories-file }}\`" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Error details section (only if there are errors)
        if [ "$VALIDATION_FAILED" = "true" ] && [ -f validation-errors.md ]; then
          echo "## 🚨 Error Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat validation-errors.md >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Generated artifacts section
        echo "## 📄 Generated Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The following validation reports have been generated:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        artifacts_found=false
        if [ -f spectral-report.json ]; then
          echo "- \`spectral-report.json\` - Machine-readable OpenAPI validation results" >> $GITHUB_STEP_SUMMARY
          artifacts_found=true
        fi
        if [ -f spectral-report.md ]; then
          echo "- \`spectral-report.md\` - Human-readable OpenAPI validation report" >> $GITHUB_STEP_SUMMARY
          artifacts_found=true
        fi
        if [ -f "${{ github.action_path }}/documentation-config/.markdownlint.json" ]; then
          echo "- \`${{ github.action_path }}/documentation-config/.markdownlint.json\` - Markdownlint configuration used" >> $GITHUB_STEP_SUMMARY
          artifacts_found=true
        fi
        if [ -f "${{ github.action_path }}/api-spec-config/.spectral.yaml" ]; then
          echo "- \`${{ github.action_path }}/api-spec-config/.spectral.yaml\` - Spectral configuration used" >> $GITHUB_STEP_SUMMARY
          artifacts_found=true
        fi
        if [ -f validation-errors.md ]; then
          echo "- \`validation-errors.md\` - Detailed error log" >> $GITHUB_STEP_SUMMARY
          artifacts_found=true
        fi
        
        if [ "$artifacts_found" = false ]; then
          echo "- No artifacts generated (all validations passed)" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Next steps section (only if there are failures)
        if [ "$VALIDATION_FAILED" = "true" ]; then
          echo "## 🔧 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To resolve the identified issues:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. **Review the error details above** for specific issues" >> $GITHUB_STEP_SUMMARY
          echo "2. **Download artifacts** for complete error logs and reports" >> $GITHUB_STEP_SUMMARY
          
          if [ "$MARKDOWN_ERRORS" -gt 0 ]; then
            echo "3. **Fix markdown issues** in \`${{ inputs.documentation-directory }}\`" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "$OPENAPI_ERRORS" -gt 0 ]; then
            echo "4. **Fix OpenAPI issues** in \`${{ inputs.openapi-file }}\`" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "$JSON_ERRORS" -gt 0 ]; then
            echo "5. **Fix categories schema issues** in \`${{ inputs.categories-file }}\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "6. **Re-run the validation** to verify fixes" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*Report generated by Documentation and API Validation Action*" >> $GITHUB_STEP_SUMMARY

    - name: Final validation check
      shell: bash
      run: |
        echo "=================================================="
        echo "🏁 FINAL VALIDATION CHECK"
        echo "=================================================="
        echo "🔍 Checking overall validation status..."
        echo "📊 MARKDOWN_ERRORS: $MARKDOWN_ERRORS"
        echo "📊 OPENAPI_ERRORS: $OPENAPI_ERRORS" 
        echo "📊 JSON_ERRORS: $JSON_ERRORS"
        echo "📊 VALIDATION_FAILED: $VALIDATION_FAILED"
        echo ""
        
        echo "🔍 Performing final validation check..."
        echo ""
        echo "📊 Final Summary:"
        echo "  - Documentation directory: ${{ inputs.documentation-directory }}"
        echo "  - OpenAPI file: ${{ inputs.openapi-file }}"
        echo "  - Markdown files linted: $(find "${{ inputs.documentation-directory }}" -name "*.md" -type f | wc -l)"
        echo "  - Markdown errors: $MARKDOWN_ERRORS"
        echo "  - OpenAPI errors: $OPENAPI_ERRORS"
        echo "  - JSON errors: $JSON_ERRORS"
        echo ""
        
        if [ "$VALIDATION_FAILED" = "true" ]; then
          echo "❌ Validation FAILED - Build will fail"
          echo ""
          echo "📄 Generated reports:"
          echo "  - spectral-report.json (machine-readable)"
          echo "  - spectral-report.md (human-readable)"
          echo "  - validation-errors.md (error log)"
          echo ""
          echo "📋 GitHub Step Summary has been updated with detailed results and error information"
          echo ""
          echo "Please review the errors above and in the step summary, then fix the issues before re-running."
          echo ""
          echo "=================================================="
          echo "❌ VALIDATION FAILED - BUILD WILL FAIL"
          echo "=================================================="
          exit 1
        else
          echo "✅ All validation checks passed!"
          echo ""
          echo "📄 Generated reports:"
          echo "  - spectral-report.json (machine-readable)"
          echo "  - spectral-report.md (human-readable)"
          echo ""
          echo "📋 GitHub Step Summary has been updated with validation results"
          echo ""
          echo "=================================================="
          echo "🎉 ALL VALIDATIONS PASSED - BUILD SUCCESS"
          echo "=================================================="
        fi

branding:
  icon: 'check-circle'
  color: 'green'